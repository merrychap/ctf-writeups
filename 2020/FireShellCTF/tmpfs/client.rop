


Gadgets
=======


0x00000000000074ec: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000074e2: adc byte ptr [r8 - 0x77], cl; ret 0x2c6; 
0x00000000000071ad: adc byte ptr [r8 - 0x78], r8b; xor al, 2; ret; 
0x00000000000074e3: adc byte ptr [rax - 0x77], cl; ret 0x2c6; 
0x00000000000038ec: adc byte ptr [rax - 0x77], cl; ret; 
0x00000000000071ae: adc byte ptr [rax - 0x78], al; xor al, 2; ret; 
0x000000000000726a: adc byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000007289: adc byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000007497: adc byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000008a68: adc byte ptr [rax], al; add byte ptr [rax], al; or al, byte ptr fs:[rax]; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x00000000000074ed: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000074ab: adc dh, al; add al, byte ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000046a1: adc dword ptr [rbx], eax; pop rbx; ret; 
0x000000000000208f: adc dword ptr [rdx + 0x78], eax; mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000005f32: adc eax, 0x1db9; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000003897: adc eax, 0x48ffffe0; mov eax, dword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000000025e8: adc eax, 0x48ffffff; mov edi, ebx; call rax; 
0x0000000000007494: adc ecx, dword ptr [rax - 0x7cb7eff4]; ret 0x4901; 
0x00000000000074aa: adc r14b, al; add al, byte ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000000849b: add ah, al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000008a23: add ah, bh; in al, 0xff; jmp qword ptr [rax]; 
0x00000000000088ab: add ah, dl; loope 0x88ae; jmp qword ptr [rbp]; 
0x000000000000844d: add al, 0; add byte ptr [rax], dh; ret 0xffff; 
0x0000000000008469: add al, 0; add byte ptr [rdx + rax*8 - 1], al; jmp qword ptr [rax]; 
0x0000000000007269: add al, 0x10; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007288: add al, 0x10; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000040e8: add al, 0x24; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000071ed: add al, 0x48; mov dword ptr [rdi + 0x10], eax; ret; 
0x000000000000728d: add al, 0x48; mov dword ptr [rdi + 0x10], edx; ret; 
0x0000000000005f3c: add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000007251: add al, 2; ret; 
0x0000000000008b9f: add al, ah; out 0xff, al; call qword ptr [rbx]; 
0x00000000000074e8: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000074ad: add al, byte ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000080ef: add al, ch; add byte ptr [rax], al; add byte ptr [rdi + rbx*4 - 1], ch; call qword ptr [rax]; 
0x0000000000005ac9: add al, ch; add dword ptr [rbp - 0x53170001], edi; mov ebp, 0x8948ffff; ret; 
0x0000000000006bbc: add al, ch; fisubr word ptr [rdi + rdi*8 + 0x3d8d48ff]; push rdi; xor al, 0x20; add al, ch; ret 0xffab; 
0x0000000000005b10: add al, ch; mov edx, 0x66ffffbc; nop dword ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x000000000000463a: add al, ch; nop; sar edi, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000006bc8: add al, ch; ret 0xffab; 
0x0000000000005d47: add al, ch; ret; 
0x000000000000391f: add al, ch; stosd dword ptr [rdi], eax; fdivp st(7); dec dword ptr [rax - 0x77]; ret; 
0x0000000000001f77: add bl, dh; ret; 
0x00000000000070bf: add byte ptr [rax + 1], bh; ret; 
0x0000000000008477: add byte ptr [rax + rax], bl; add byte ptr [rax], al; je 0x8482; add byte ptr [rax], al; push rax; ret 0xffff; 
0x00000000000088a7: add byte ptr [rax - 0x2bfffff8], ah; loope 0x88ae; jmp qword ptr [rbp]; 
0x0000000000005f2f: add byte ptr [rax - 0x73], cl; adc eax, 0x1db9; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000022ef: add byte ptr [rax - 0x73], cl; add eax, 0xfffffc99; mov qword ptr [rdi], rax; ret; 
0x0000000000002d47: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rbp + 0x48fffffd], bh; mov edi, ebp; call rax; 
0x0000000000002bf7: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rbx + 0x48fffffc], bl; mov edi, ebp; call rax; 
0x000000000000355f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffa], ah; mov edi, ebp; call rax; 
0x0000000000002cd7: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffd], al; mov edi, ebp; call rax; 
0x00000000000064f7: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x4cfffffb], al; mov edi, esp; call rax; 
0x0000000000002d0f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48fffffd], bl; mov edi, ebp; call rax; 
0x00000000000044de: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffd], dl; mov edi, ebx; call rax; 
0x0000000000002537: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffe], bh; mov edi, ebp; call rax; 
0x00000000000025de: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rip + 0x48ffffff], dl; mov edi, ebx; call rax; 
0x0000000000003e07: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rip + 0x4cfffffc], dh; mov edi, ebp; call rax; 
0x0000000000003e3f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rsi + 0x4cfffffb], dl; mov edi, ebp; call rax; 
0x0000000000003f5f: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rsp + rdi*8 - 1], bl; dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x0000000000006276: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rbp + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000002316: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rbp*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000005d76: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004dbe: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rdi*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000006e7e: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000002396: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004d26: add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rsp + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000001c98: add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cc8: add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cf8: add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d27: add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000005b1f: add byte ptr [rax - 0x77], cl; cld; ret; 
0x0000000000006ff7: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x62]; add rsp, 0x10; pop rbx; ret; 
0x00000000000055d4: add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x0000000000005dfb: add byte ptr [rax - 0x77], cl; ret 0x1bf; 
0x00000000000028ee: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000004bdd: add byte ptr [rax - 0x77], cl; ret; 
0x00000000000016ba: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000002013: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000008a2f: add byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdx + rcx], ch; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x0000000000008499: add byte ptr [rax], al; add ah, al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000000844a: add byte ptr [rax], al; add al, 0; add byte ptr [rax], dh; ret 0xffff; 
0x00000000000080ed: add byte ptr [rax], al; add al, ch; add byte ptr [rax], al; add byte ptr [rdi + rbx*4 - 1], ch; call qword ptr [rax]; 
0x0000000000001f75: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000088a5: add byte ptr [rax], al; add byte ptr [rax - 0x2bfffff8], ah; loope 0x88ae; jmp qword ptr [rbp]; 
0x0000000000006274: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rbp + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000002314: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rbp*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000005d74: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004dbc: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rdi*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000006e7c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000002394: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004d24: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; sal byte ptr [rsp + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000001c96: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cc6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cf6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d25: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rdi - 0x20], cl; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000005b1d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cld; ret; 
0x0000000000006ff5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x62]; add rsp, 0x10; pop rbx; ret; 
0x00000000000055d2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x0000000000002011: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000069db: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000005b1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; cld; ret; 
0x0000000000000336: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000000338: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000002097: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000020a2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx], 0; ret; 
0x000000000000033a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000748b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0xc; adc ecx, dword ptr [rax - 0x7cb7eff4]; ret 0x4901; 
0x00000000000069ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0x78]; ret; 
0x00000000000020bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x00000000000069fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x78]; ret; 
0x0000000000007165: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000070eb: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; ret; 
0x000000000000226c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000070e3: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x0000000000002099: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000020a4: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx], 0; ret; 
0x00000000000020ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x70]; ret; 
0x00000000000020fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000000210c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000075ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000005b1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rsp, rdi; ret; 
0x000000000000469c: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000001edc: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000712b: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000000033c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000070cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000008445: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rsp + rax], al; add byte ptr [rax], dh; ret 0xffff; 
0x0000000000008a1d: add byte ptr [rax], al; add byte ptr [rax], bl; or al, byte ptr [rax]; add ah, bh; in al, 0xff; jmp qword ptr [rax]; 
0x0000000000004b1c: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000004d9b: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000000748d: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0xc; adc ecx, dword ptr [rax - 0x7cb7eff4]; ret 0x4901; 
0x00000000000040ec: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x30]; 
0x00000000000080f1: add byte ptr [rax], al; add byte ptr [rdi + rbx*4 - 1], ch; call qword ptr [rax]; 
0x000000000000469d: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000008a69: add byte ptr [rax], al; add byte ptr [rdx + rcx], ah; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008a31: add byte ptr [rax], al; add byte ptr [rdx + rcx], ch; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x0000000000008449: add byte ptr [rax], al; add byte ptr [rsp + rax], al; add byte ptr [rax], dh; ret 0xffff; 
0x0000000000006f78: add byte ptr [rax], al; add dh, al; sbb eax, dword ptr [rax]; ret; 
0x0000000000005cee: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000005b0f: add byte ptr [rax], al; call 0x17d0; nop word ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x0000000000008a22: add byte ptr [rax], al; cld; in al, 0xff; jmp qword ptr [rax]; 
0x0000000000008a36: add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x000000000000224f: add byte ptr [rax], al; je 0x225d; movzx edx, byte ptr [rdx + 0xf]; mov byte ptr [rdi + 0x87], dl; mov qword ptr [rdi + 0x88], rax; ret; 
0x000000000000847a: add byte ptr [rax], al; je 0x8482; add byte ptr [rax], al; push rax; ret 0xffff; 
0x000000000000887a: add byte ptr [rax], al; je 0x8886; add byte ptr [rax], al; nop; loope 0x8882; jmp qword ptr [rbp]; 
0x00000000000069ee: add byte ptr [rax], al; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020ce: add byte ptr [rax], al; lea rax, [rdi + 0x78]; ret; 
0x00000000000020be: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x00000000000022ee: add byte ptr [rax], al; lea rax, [rip - 0x367]; mov qword ptr [rdi], rax; ret; 
0x0000000000005f2e: add byte ptr [rax], al; lea rdx, [rip + 0x1db9]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000006f79: add byte ptr [rax], al; mov byte ptr [rax + 0x1b], 0; ret; 
0x0000000000006f4d: add byte ptr [rax], al; mov byte ptr [rdi + 0x1d], 0; ret; 
0x00000000000069fe: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x78]; ret; 
0x0000000000008ac2: add byte ptr [rax], al; mov esp, 0x4800000a; out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000007167: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000070ed: add byte ptr [rax], al; mov qword ptr [rdi + 0x10], 0; ret; 
0x000000000000225b: add byte ptr [rax], al; mov qword ptr [rdi + 0x88], rax; ret; 
0x000000000000226e: add byte ptr [rax], al; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x0000000000002275: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000070e5: add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x000000000000209b: add byte ptr [rax], al; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000020a6: add byte ptr [rax], al; mov qword ptr [rdx], 0; ret; 
0x0000000000001c97: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cc7: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cf7: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d26: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1c2f; mov rdi, rbx; call rax; 
0x000000000000368e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x32d7; mov rdi, r13; call rax; 
0x0000000000003526: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x3397; mov rdi, r12; call rax; 
0x0000000000003736: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x33fa; mov rdi, r12; call rax; 
0x00000000000036fe: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x3450; mov rdi, r12; call rax; 
0x00000000000036c6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x34a6; mov rdi, r12; call rax; 
0x0000000000002315: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x22cb; mov rdi, rbx; call rax; 
0x0000000000002395: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x236a; mov rdi, rbx; call rax; 
0x0000000000002536: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x23ff; mov rdi, rbp; call rax; 
0x000000000000256e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025a6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025dd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2501; mov rdi, rbx; call rax; 
0x0000000000002786: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027be: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027f6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x26fb; mov rdi, rbp; call rax; 
0x000000000000282d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bf6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c2e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c66: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002c9e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cd6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d0e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d46: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d7e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002db5: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2bbe; mov rdi, rbx; call rax; 
0x0000000000003596: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2fa9; mov rdi, rbp; call rax; 
0x000000000000355e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035cd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003e3e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e06: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e76: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f26: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f5e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eae: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044a5: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044dd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x427e; mov rdi, rbx; call rax; 
0x0000000000004515: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d25: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dbd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4d81; mov rdi, rbx; call rax; 
0x000000000000529d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x50f9; mov rdi, rbx; call rax; 
0x0000000000005375: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d75: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005eb5: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5e81; mov rdi, rbx; call rax; 
0x00000000000064f6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6086; mov rdi, r12; call rax; 
0x0000000000006275: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6245; mov rdi, rbx; call rax; 
0x000000000000697e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006e7d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6e12; mov rdi, rbx; call rax; 
0x00000000000020ee: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x70]; ret; 
0x00000000000020fe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020de: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000000210e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000075ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000000759e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; ret; 
0x0000000000006ff6: add byte ptr [rax], al; mov rax, rbx; jne 0x705f; add rsp, 0x10; pop rbx; ret; 
0x00000000000040ed: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000002ee2: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000005b1e: add byte ptr [rax], al; mov rsp, rdi; ret; 
0x000000000000469e: add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000005f35: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000070db: add byte ptr [rax], al; nop dword ptr [rax]; mov qword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x000000000000887e: add byte ptr [rax], al; nop; loope 0x8882; jmp qword ptr [rbp]; 
0x0000000000008b4e: add byte ptr [rax], al; nop; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008a6a: add byte ptr [rax], al; or al, byte ptr fs:[rax]; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008ac6: add byte ptr [rax], al; out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000004b1d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000001ede: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000004d9c: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000000476d: add byte ptr [rax], al; pop rbx; ret; 
0x000000000000847e: add byte ptr [rax], al; push rax; ret 0xffff; 
0x000000000000033e: add byte ptr [rax], al; ret; 
0x0000000000008446: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; add al, 0; add byte ptr [rax], dh; ret 0xffff; 
0x0000000000008abe: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x4800000a; out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000008a1e: add byte ptr [rax], al; sbb byte ptr [rdx], cl; add byte ptr [rax], al; cld; in al, 0xff; jmp qword ptr [rax]; 
0x0000000000007ed2: add byte ptr [rax], al; shr ah, 0xff; jmp qword ptr [rax]; 
0x0000000000008a32: add byte ptr [rax], al; sub al, 0xa; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x0000000000007632: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000008b9a: add byte ptr [rax], al; xchg eax, esp; or eax, dword ptr [rax]; add al, ah; out 0xff, al; call qword ptr [rbx]; 
0x00000000000070ce: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000008447: add byte ptr [rax], bl; add byte ptr [rax], al; add byte ptr [rsp + rax], al; add byte ptr [rax], dh; ret 0xffff; 
0x0000000000008a1f: add byte ptr [rax], bl; or al, byte ptr [rax]; add ah, bh; in al, 0xff; jmp qword ptr [rax]; 
0x00000000000088a3: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rax - 0x2bfffff8], ah; loope 0x88ae; jmp qword ptr [rbp]; 
0x000000000000844f: add byte ptr [rax], dh; ret 0xffff; 
0x00000000000080eb: add byte ptr [rax], dl; add byte ptr [rax], al; add al, ch; add byte ptr [rax], al; add byte ptr [rdi + rbx*4 - 1], ch; call qword ptr [rax]; 
0x0000000000008a67: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdx + rcx], ah; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008a6f: add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x00000000000022ed: add byte ptr [rax], r8b; lea rax, [rip - 0x367]; mov qword ptr [rdi], rax; ret; 
0x000000000000759d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; ret; 
0x0000000000004b1e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000005bea: add byte ptr [rbp + 9], dh; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000004d9d: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000074ae: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000074df: add byte ptr [rbx + rcx*4 + 0x43], cl; adc byte ptr [rax - 0x77], cl; ret 0x2c6; 
0x000000000000748f: add byte ptr [rcx + 0xf], al; mov dh, 0xc; adc ecx, dword ptr [rax - 0x7cb7eff4]; ret 0x4901; 
0x00000000000074e9: add byte ptr [rcx + rcx*4 + 0x43], cl; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000040ee: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x30]; 
0x0000000000001f6d: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000080f3: add byte ptr [rdi + rbx*4 - 1], ch; call qword ptr [rax]; 
0x000000000000469f: add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000005f36: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000846b: add byte ptr [rdx + rax*8 - 1], al; jmp qword ptr [rax]; 
0x0000000000008a6b: add byte ptr [rdx + rcx], ah; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008a33: add byte ptr [rdx + rcx], ch; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x00000000000069e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020b5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x00000000000069e4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020b4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000000844b: add byte ptr [rsp + rax], al; add byte ptr [rax], dh; ret 0xffff; 
0x00000000000071ca: add cl, byte ptr [rax - 0x7d]; rol byte ptr [rdx], 0x48; mov dword ptr [rdi + 0x10], eax; ret; 
0x0000000000006f7a: add dh, al; sbb eax, dword ptr [rax]; ret; 
0x0000000000007232: add dword ptr [rax + 0x39], ecx; ret 0x8844; 
0x00000000000071aa: add dword ptr [rax - 0x77], ecx; adc byte ptr [r8 - 0x78], r8b; xor al, 2; ret; 
0x0000000000004bdb: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000058d8: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000000476b: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000070c1: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000007238: add dword ptr [rbp - 0x1b], esi; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000005acb: add dword ptr [rbp - 0x53170001], edi; mov ebp, 0x8948ffff; ret; 
0x000000000000723c: add dword ptr [rdi + 0x10], edx; ret; 
0x0000000000004928: add dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x0000000000001f1a: add eax, 0x2080d1; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000001ec9: add eax, 0x20810a; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x00000000000016b6: add eax, 0x20892d; test rax, rax; je 0x16c2; call rax; 
0x00000000000016b6: add eax, 0x20892d; test rax, rax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000002144: add eax, 0x75c83948; out 0x48, al; mov dword ptr [rdi + 0x70], ecx; ret; 
0x00000000000037f4: add eax, 0xffe036e8; dec dword ptr [rax - 0x77]; fucomip st(0); scasb al, byte ptr [rdi]; loope 0x3800; jmp qword ptr [rsi + 0xf]; 
0x00000000000022f2: add eax, 0xfffffc99; mov qword ptr [rdi], rax; ret; 
0x00000000000022e2: add eax, 0xfffffcc9; mov qword ptr [rdi], rax; ret; 
0x0000000000007230: add eax, 1; cmp rdx, rax; mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000071cc: add eax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071eb: add eax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x0000000000002017: add eax, ebp; ret; 
0x0000000000005f3f: add eax, edx; jmp rax; 
0x0000000000002ede: add edi, dword ptr [rsi + 0xa]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000000726c: add edx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x000000000000728b: add edx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000006ffe: add esp, 0x10; pop rbx; ret; 
0x0000000000005bee: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000005cf1: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000000557a: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000002e6a: add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000016c3: add esp, 8; ret; 
0x0000000000005d56: add esp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000071a9: add qword ptr [rax - 0x77], rcx; adc byte ptr [r8 - 0x78], r8b; xor al, 2; ret; 
0x000000000000723b: add qword ptr [rdi + 0x10], rdx; ret; 
0x000000000000722f: add rax, 1; cmp rdx, rax; mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000071cb: add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071ea: add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x0000000000005f3e: add rax, rdx; jmp rax; 
0x000000000000726b: add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x000000000000728a: add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000006ffd: add rsp, 0x10; pop rbx; ret; 
0x0000000000005bed: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000005cf0: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000005579: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000002e69: add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000016c2: add rsp, 8; ret; 
0x0000000000005d55: add rsp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000040e9: and al, 0xbe; or al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000048a1: and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000001f5b: and byte ptr [rax], 0; call 0x1a20; call 0x1eb0; mov byte ptr [rip + 0x2082e9], 1; pop rbp; ret; 
0x0000000000001f1c: and byte ptr [rax], 0; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000008a30: and byte ptr [rax], al; add byte ptr [rax], al; sub al, 0xa; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x0000000000001f5c: and byte ptr [rax], al; call 0x1a20; call 0x1eb0; mov byte ptr [rip + 0x2082e9], 1; pop rbp; ret; 
0x00000000000016b9: and byte ptr [rax], al; test rax, rax; je 0x16c2; call rax; 
0x00000000000016b9: and byte ptr [rax], al; test rax, rax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000001ecc: and byte ptr [rax], al; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x0000000000001f1d: and byte ptr [rax], al; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000001e3b: and dword ptr [rax], 0x358d4800; sbb byte ptr [rax - 0x3b7cb800], al; or cl, ch; ret 0xfff9; 
0x0000000000001ecb: and dword ptr [rax], 0xc0854800; je 0x1ee0; pop rbp; jmp rax; 
0x000000000000715c: call 0x1700; mov qword ptr [rbx + 0x10], 0; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000007122: call 0x17a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000005b11: call 0x17d0; nop word ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x0000000000007190: call 0x1830; mov qword ptr [rbx], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000040e1: call 0x18b0; mov rax, qword ptr [r12]; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000002ed7: call 0x18b0; mov rax, qword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000000232a: call 0x18e0; nop; mov eax, esi; ret; 
0x000000000000475d: call 0x1950; mov rdi, rbx; call 0x19f0; mov eax, 1; pop rbx; ret; 
0x0000000000004765: call 0x19f0; mov eax, 1; pop rbx; ret; 
0x0000000000001f5e: call 0x1a20; call 0x1eb0; mov byte ptr [rip + 0x2082e9], 1; pop rbp; ret; 
0x0000000000001f63: call 0x1eb0; mov byte ptr [rip + 0x2082e9], 1; pop rbp; ret; 
0x0000000000002ee7: call qword ptr [rax + 0x30]; 
0x0000000000007598: call qword ptr [rax + 0x441f0f66]; add byte ptr [rax], al; mov rax, qword ptr [rdi]; ret; 
0x0000000000007eb7: call qword ptr [rax + 0xa]; 
0x000000000000802b: call qword ptr [rax + 3]; 
0x00000000000080f7: call qword ptr [rax]; 
0x0000000000008b53: call qword ptr [rbx]; 
0x0000000000008587: call qword ptr [rdi]; 
0x000000000000806b: call qword ptr [rsi]; 
0x00000000000016c0: call rax; 
0x00000000000016c0: call rax; add rsp, 8; ret; 
0x000000000000827f: call rbx; 
0x0000000000006651: call rdx; 
0x000000000000325e: call rsp; 
0x0000000000002141: clc; je 0x214a; cmp rax, rcx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x0000000000008a24: cld; in al, 0xff; jmp qword ptr [rax]; 
0x0000000000005b22: cld; ret; 
0x0000000000002140: cmp eax, 0x64; je 0x214a; cmp rax, rcx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x0000000000003695: cmp eax, ecx; je 0x32d7; mov rdi, r13; call rax; 
0x000000000000352d: cmp eax, ecx; je 0x3397; mov rdi, r12; call rax; 
0x000000000000373d: cmp eax, ecx; je 0x33fa; mov rdi, r12; call rax; 
0x0000000000003705: cmp eax, ecx; je 0x3450; mov rdi, r12; call rax; 
0x00000000000036cd: cmp eax, ecx; je 0x34a6; mov rdi, r12; call rax; 
0x0000000000002146: cmp eax, ecx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x000000000000231c: cmp eax, edx; je 0x22cb; mov rdi, rbx; call rax; 
0x000000000000239c: cmp eax, edx; je 0x236a; mov rdi, rbx; call rax; 
0x000000000000253d: cmp eax, edx; je 0x23ff; mov rdi, rbp; call rax; 
0x0000000000002575: cmp eax, edx; je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025ad: cmp eax, edx; je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025e4: cmp eax, edx; je 0x2501; mov rdi, rbx; call rax; 
0x000000000000278d: cmp eax, edx; je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027c5: cmp eax, edx; je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027fd: cmp eax, edx; je 0x26fb; mov rdi, rbp; call rax; 
0x0000000000002834: cmp eax, edx; je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bfd: cmp eax, edx; je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c35: cmp eax, edx; je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c6d: cmp eax, edx; je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002ca5: cmp eax, edx; je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cdd: cmp eax, edx; je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d15: cmp eax, edx; je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d4d: cmp eax, edx; je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d85: cmp eax, edx; je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002dbc: cmp eax, edx; je 0x2bbe; mov rdi, rbx; call rax; 
0x000000000000359d: cmp eax, edx; je 0x2fa9; mov rdi, rbp; call rax; 
0x0000000000003565: cmp eax, edx; je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035d4: cmp eax, edx; je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003e45: cmp eax, edx; je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e0d: cmp eax, edx; je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e7d: cmp eax, edx; je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f2d: cmp eax, edx; je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f65: cmp eax, edx; je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eb5: cmp eax, edx; je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044ac: cmp eax, edx; je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044e4: cmp eax, edx; je 0x427e; mov rdi, rbx; call rax; 
0x000000000000451c: cmp eax, edx; je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d2c: cmp eax, edx; je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dc4: cmp eax, edx; je 0x4d81; mov rdi, rbx; call rax; 
0x00000000000052a4: cmp eax, edx; je 0x50f9; mov rdi, rbx; call rax; 
0x000000000000537c: cmp eax, edx; je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d7c: cmp eax, edx; je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005ebc: cmp eax, edx; je 0x5e81; mov rdi, rbx; call rax; 
0x00000000000064fd: cmp eax, edx; je 0x6086; mov rdi, r12; call rax; 
0x000000000000627c: cmp eax, edx; je 0x6245; mov rdi, rbx; call rax; 
0x0000000000006985: cmp eax, edx; je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006e84: cmp eax, edx; je 0x6e12; mov rdi, rbx; call rax; 
0x0000000000001c9e: cmp eax, esp; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cce: cmp eax, esp; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cfe: cmp eax, esp; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d2d: cmp eax, esp; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000002ce1: cmp ebp, 0x8948ffff; out dx, eax; call rax; 
0x0000000000007234: cmp edx, eax; mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000006646: cmp edx, ecx; je 0x6404; mov rdi, rax; call rdx; 
0x000000000000213f: cmp rax, 0x64; je 0x214a; cmp rax, rcx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x0000000000001c9d: cmp rax, r12; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001ccd: cmp rax, r12; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cfd: cmp rax, r12; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d2c: cmp rax, r12; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000003694: cmp rax, rcx; je 0x32d7; mov rdi, r13; call rax; 
0x000000000000352c: cmp rax, rcx; je 0x3397; mov rdi, r12; call rax; 
0x000000000000373c: cmp rax, rcx; je 0x33fa; mov rdi, r12; call rax; 
0x0000000000003704: cmp rax, rcx; je 0x3450; mov rdi, r12; call rax; 
0x00000000000036cc: cmp rax, rcx; je 0x34a6; mov rdi, r12; call rax; 
0x0000000000002145: cmp rax, rcx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x000000000000231b: cmp rax, rdx; je 0x22cb; mov rdi, rbx; call rax; 
0x000000000000239b: cmp rax, rdx; je 0x236a; mov rdi, rbx; call rax; 
0x000000000000253c: cmp rax, rdx; je 0x23ff; mov rdi, rbp; call rax; 
0x0000000000002574: cmp rax, rdx; je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025ac: cmp rax, rdx; je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025e3: cmp rax, rdx; je 0x2501; mov rdi, rbx; call rax; 
0x000000000000278c: cmp rax, rdx; je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027c4: cmp rax, rdx; je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027fc: cmp rax, rdx; je 0x26fb; mov rdi, rbp; call rax; 
0x0000000000002833: cmp rax, rdx; je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bfc: cmp rax, rdx; je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c34: cmp rax, rdx; je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c6c: cmp rax, rdx; je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002ca4: cmp rax, rdx; je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cdc: cmp rax, rdx; je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d14: cmp rax, rdx; je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d4c: cmp rax, rdx; je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d84: cmp rax, rdx; je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002dbb: cmp rax, rdx; je 0x2bbe; mov rdi, rbx; call rax; 
0x000000000000359c: cmp rax, rdx; je 0x2fa9; mov rdi, rbp; call rax; 
0x0000000000003564: cmp rax, rdx; je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035d3: cmp rax, rdx; je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003e44: cmp rax, rdx; je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e0c: cmp rax, rdx; je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e7c: cmp rax, rdx; je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f2c: cmp rax, rdx; je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f64: cmp rax, rdx; je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eb4: cmp rax, rdx; je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044ab: cmp rax, rdx; je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044e3: cmp rax, rdx; je 0x427e; mov rdi, rbx; call rax; 
0x000000000000451b: cmp rax, rdx; je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d2b: cmp rax, rdx; je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dc3: cmp rax, rdx; je 0x4d81; mov rdi, rbx; call rax; 
0x00000000000052a3: cmp rax, rdx; je 0x50f9; mov rdi, rbx; call rax; 
0x000000000000537b: cmp rax, rdx; je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d7b: cmp rax, rdx; je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005ebb: cmp rax, rdx; je 0x5e81; mov rdi, rbx; call rax; 
0x00000000000064fc: cmp rax, rdx; je 0x6086; mov rdi, r12; call rax; 
0x000000000000627b: cmp rax, rdx; je 0x6245; mov rdi, rbx; call rax; 
0x0000000000006984: cmp rax, rdx; je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006e83: cmp rax, rdx; je 0x6e12; mov rdi, rbx; call rax; 
0x0000000000007233: cmp rdx, rax; mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000006645: cmp rdx, rcx; je 0x6404; mov rdi, rax; call rdx; 
0x0000000000005ac6: cmpsb byte ptr [rsi], byte ptr [rdi]; sbb al, 0; add al, ch; add dword ptr [rbp - 0x53170001], edi; mov ebp, 0x8948ffff; ret; 
0x00000000000022df: dec dword ptr [rax - 0x73]; add eax, 0xfffffcc9; mov qword ptr [rdi], rax; ret; 
0x0000000000002edb: dec dword ptr [rax - 0x75]; add edi, dword ptr [rsi + 0xa]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000000037f9: dec dword ptr [rax - 0x77]; fucomip st(0); scasb al, byte ptr [rdi]; loope 0x3800; jmp qword ptr [rsi + 0xf]; 
0x0000000000001ca5: dec dword ptr [rax - 0x77]; out dx, eax; call rax; 
0x0000000000001d91: dec dword ptr [rax - 0x77]; ret; 
0x0000000000007ecf: dec dword ptr [rbx + rcx]; add byte ptr [rax], al; shr ah, 0xff; jmp qword ptr [rax]; 
0x000000000000369c: dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x0000000000003534: dec dword ptr [rcx + rcx*4 - 0x19]; call rax; 
0x00000000000040e5: dec dword ptr [rcx - 0x75]; add al, 0x24; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000004875: dec dword ptr [rdi]; xchg eax, esp; ret 0xd184; 
0x0000000000005d44: fadd dword ptr [rdx + 0x20]; add al, ch; ret; 
0x00000000000054d1: fbstp tbyte ptr [rbp + rax - 0x18]; push rdi; ret; 
0x0000000000006ffa: fdiv dword ptr [rbp + 0x62]; add rsp, 0x10; pop rbx; ret; 
0x0000000000003922: fdivp st(7); dec dword ptr [rax - 0x77]; ret; 
0x0000000000006bbe: fisubr word ptr [rdi + rdi*8 + 0x3d8d48ff]; push rdi; xor al, 0x20; add al, ch; ret 0xffab; 
0x0000000000004b51: fmul dword ptr [rax - 0x7d]; ret; 
0x000000000000760c: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000003895: fucomip st(0); adc eax, 0x48ffffe0; mov eax, dword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000000055d7: fucomip st(0); ret; 
0x00000000000037fc: fucomip st(0); scasb al, byte ptr [rdi]; loope 0x3800; jmp qword ptr [rsi + 0xf]; 
0x0000000000001fa3: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000004eb7: in al, 0xf; xchg eax, esp; ret 0xd120; 
0x0000000000008a25: in al, 0xff; jmp qword ptr [rax]; 
0x00000000000016b2: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x20892d; test rax, rax; je 0x16c2; call rax; 
0x000000000000723a: in eax, 0x48; add dword ptr [rdi + 0x10], edx; ret; 
0x0000000000008a39: in eax, 0xff; jmp rsp; 
0x00000000000058d2: inc dword ptr [rbp + 0x15840fc0]; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000002e64: inc dword ptr [rbp + 0x48df75c0]; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000028ec: ja 0x290e; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000006f46: jb 0x6f90; mov dword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000006f41: jb 0x6fb2; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000006f40: jb 0x6fb4; outsd dx, dword ptr [rsi]; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000002970: jbe 0x2992; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000016be: je 0x16c2; call rax; 
0x00000000000016be: je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000001ca0: je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cd0: je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001d00: je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d2f: je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000001ec5: je 0x1ee0; mov rax, qword ptr [rip + 0x20810a]; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x0000000000001ed1: je 0x1ee0; pop rbp; jmp rax; 
0x0000000000001f16: je 0x1f30; mov rax, qword ptr [rip + 0x2080d1]; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000001f22: je 0x1f30; pop rbp; jmp rax; 
0x0000000000002143: je 0x214a; cmp rax, rcx; jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x0000000000002251: je 0x225d; movzx edx, byte ptr [rdx + 0xf]; mov byte ptr [rdi + 0x87], dl; mov qword ptr [rdi + 0x88], rax; ret; 
0x000000000000231e: je 0x22cb; mov rdi, rbx; call rax; 
0x000000000000239e: je 0x236a; mov rdi, rbx; call rax; 
0x000000000000253f: je 0x23ff; mov rdi, rbp; call rax; 
0x0000000000002577: je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025af: je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025e6: je 0x2501; mov rdi, rbx; call rax; 
0x000000000000278f: je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027c7: je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027ff: je 0x26fb; mov rdi, rbp; call rax; 
0x0000000000002836: je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bff: je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c37: je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c6f: je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002ca7: je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cdf: je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d17: je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d4f: je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d87: je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002dbe: je 0x2bbe; mov rdi, rbx; call rax; 
0x000000000000359f: je 0x2fa9; mov rdi, rbp; call rax; 
0x0000000000003567: je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035d6: je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003697: je 0x32d7; mov rdi, r13; call rax; 
0x000000000000352f: je 0x3397; mov rdi, r12; call rax; 
0x000000000000373f: je 0x33fa; mov rdi, r12; call rax; 
0x0000000000003707: je 0x3450; mov rdi, r12; call rax; 
0x00000000000036cf: je 0x34a6; mov rdi, r12; call rax; 
0x0000000000003e47: je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e0f: je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e7f: je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f2f: je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f67: je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eb7: je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044ae: je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044e6: je 0x427e; mov rdi, rbx; call rax; 
0x000000000000451e: je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d2e: je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dc6: je 0x4d81; mov rdi, rbx; call rax; 
0x00000000000052a6: je 0x50f9; mov rdi, rbx; call rax; 
0x000000000000537e: je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d7e: je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005cea: je 0x5d90; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000005ebe: je 0x5e81; mov rdi, rbx; call rax; 
0x0000000000005e2f: je 0x5ed0; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000064ff: je 0x6086; mov rdi, r12; call rax; 
0x000000000000627e: je 0x6245; mov rdi, rbx; call rax; 
0x0000000000006648: je 0x6404; mov rdi, rax; call rdx; 
0x0000000000006987: je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006b9f: je 0x6bd5; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000006b9e: je 0x6c14; xor al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000006e86: je 0x6e12; mov rdi, rbx; call rax; 
0x000000000000847c: je 0x8482; add byte ptr [rax], al; push rax; ret 0xffff; 
0x000000000000887c: je 0x8886; add byte ptr [rax], al; nop; loope 0x8882; jmp qword ptr [rbp]; 
0x0000000000007cfb: jmp qword ptr [rax - 0x1c]; 
0x0000000000007dc7: jmp qword ptr [rax]; 
0x0000000000008883: jmp qword ptr [rbp]; 
0x00000000000084a3: jmp qword ptr [rcx]; 
0x0000000000001fa5: jmp qword ptr [rsi + 0x2e]; 
0x0000000000001d41: jmp qword ptr [rsi + 0xf]; 
0x0000000000001a5d: jmp qword ptr [rsi - 0x70]; 
0x0000000000001ed4: jmp rax; 
0x0000000000007daf: jmp rsp; 
0x0000000000002148: jne 0x2130; mov qword ptr [rdi + 0x70], rcx; ret; 
0x0000000000002e67: jne 0x2e48; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000005beb: jne 0x5bf6; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000006ffb: jne 0x705f; add rsp, 0x10; pop rbx; ret; 
0x0000000000007239: jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000002091: js 0x20db; mov dword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000069f1: lea eax, [rdi + 0x1408]; ret; 
0x00000000000020d1: lea eax, [rdi + 0x78]; ret; 
0x00000000000020c1: lea eax, [rdi + 8]; ret; 
0x00000000000022e1: lea eax, [rip - 0x337]; mov qword ptr [rdi], rax; ret; 
0x00000000000022f1: lea eax, [rip - 0x367]; mov qword ptr [rdi], rax; ret; 
0x00000000000071a8: lea ecx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007248: lea ecx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x0000000000005f31: lea edx, [rip + 0x1db9]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000069f0: lea rax, [rdi + 0x1408]; ret; 
0x00000000000020d0: lea rax, [rdi + 0x78]; ret; 
0x00000000000020c0: lea rax, [rdi + 8]; ret; 
0x00000000000022e0: lea rax, [rip - 0x337]; mov qword ptr [rdi], rax; ret; 
0x00000000000022f0: lea rax, [rip - 0x367]; mov qword ptr [rdi], rax; ret; 
0x00000000000071a7: lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007247: lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x0000000000005f30: lea rdx, [rip + 0x1db9]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000005ad0: lodsb al, byte ptr [rsi]; mov ebp, 0x8948ffff; ret; 
0x000000000000296f: lodsd eax, dword ptr [rsi]; jbe 0x2992; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000037ce: loope 0x37cf; dec dword ptr [rax - 0x77]; ret; 
0x00000000000037ff: loope 0x3800; jmp qword ptr [rsi + 0xf]; 
0x00000000000070ba: loope 0x70af; ret; 
0x0000000000008881: loope 0x8882; jmp qword ptr [rbp]; 
0x00000000000088ad: loope 0x88ae; jmp qword ptr [rbp]; 
0x0000000000007268: mov bh, 4; adc byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000006f7b: mov byte ptr [rax + 0x1b], 0; ret; 
0x0000000000002103: mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000006f6f: mov byte ptr [rcx + 0xa], 0x44; mov qword ptr [rax + 8], 0xb; mov byte ptr [rax + 0x1b], 0; ret; 
0x0000000000006f43: mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000007237: mov byte ptr [rcx], al; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007236: mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000006f4f: mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000002257: mov byte ptr [rdi + 0x87], dl; mov qword ptr [rdi + 0x88], rax; ret; 
0x00000000000071b0: mov byte ptr [rdx + rax], dh; ret; 
0x00000000000071af: mov byte ptr [rdx + rax], sil; ret; 
0x00000000000074e7: mov byte ptr [rdx], 0; mov qword ptr [rbx + 0x10], r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000074ac: mov byte ptr [rdx], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000001f68: mov byte ptr [rip + 0x2082e9], 1; pop rbp; ret; 
0x0000000000005f38: mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000007492: mov dh, 0xc; adc ecx, dword ptr [rax - 0x7cb7eff4]; ret 0x4901; 
0x0000000000006f74: mov dword ptr [rax + 8], 0xb; mov byte ptr [rax + 0x1b], 0; ret; 
0x00000000000016b8: mov dword ptr [rax], esp; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000007162: mov dword ptr [rbx + 0x10], 0; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000007128: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000074a9: mov dword ptr [rbx + 0x10], eax; mov byte ptr [rdx], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000074eb: mov dword ptr [rbx + 0x10], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000004699: mov dword ptr [rbx + 0x18], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000006b9c: mov dword ptr [rbx + 0x74], eax; je 0x6bd5; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000000716a: mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000007196: mov dword ptr [rbx], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000006f3c: mov dword ptr [rcx + 8], 0x6f727265; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x00000000000070f0: mov dword ptr [rdi + 0x10], 0; ret; 
0x00000000000071d0: mov dword ptr [rdi + 0x10], eax; ret; 
0x00000000000071ac: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdx + rax], sil; ret; 
0x000000000000724c: mov dword ptr [rdi + 0x10], ecx; movzx eax, byte ptr [rdx + rax]; ret; 
0x0000000000007270: mov dword ptr [rdi + 0x10], edx; ret; 
0x000000000000214b: mov dword ptr [rdi + 0x70], ecx; ret; 
0x000000000000225e: mov dword ptr [rdi + 0x88], eax; ret; 
0x0000000000002271: mov dword ptr [rdi + 0x90], esi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x0000000000002278: mov dword ptr [rdi + 0x98], edx; ret; 
0x00000000000070e8: mov dword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x0000000000006f48: mov dword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x00000000000070e1: mov dword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x00000000000022e8: mov dword ptr [rdi], eax; ret; 
0x000000000000209e: mov dword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000002093: mov dword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000071c8: mov dword ptr [rdx + rax], esi; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071e7: mov dword ptr [rdx + rax], esi; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000020a9: mov dword ptr [rdx], 0; ret; 
0x000000000000476a: mov eax, 1; pop rbx; ret; 
0x00000000000070c0: mov eax, 1; ret; 
0x0000000000001c9a: mov eax, dword ptr [rax + 0x30]; cmp rax, r12; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cca: mov eax, dword ptr [rax + 0x30]; cmp rax, r12; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cfa: mov eax, dword ptr [rax + 0x30]; cmp rax, r12; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d29: mov eax, dword ptr [rax + 0x30]; cmp rax, r12; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000003691: mov eax, dword ptr [rax + 0x30]; cmp rax, rcx; je 0x32d7; mov rdi, r13; call rax; 
0x0000000000003529: mov eax, dword ptr [rax + 0x30]; cmp rax, rcx; je 0x3397; mov rdi, r12; call rax; 
0x0000000000003739: mov eax, dword ptr [rax + 0x30]; cmp rax, rcx; je 0x33fa; mov rdi, r12; call rax; 
0x0000000000003701: mov eax, dword ptr [rax + 0x30]; cmp rax, rcx; je 0x3450; mov rdi, r12; call rax; 
0x00000000000036c9: mov eax, dword ptr [rax + 0x30]; cmp rax, rcx; je 0x34a6; mov rdi, r12; call rax; 
0x0000000000002318: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x22cb; mov rdi, rbx; call rax; 
0x0000000000002398: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x236a; mov rdi, rbx; call rax; 
0x0000000000002539: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x23ff; mov rdi, rbp; call rax; 
0x0000000000002571: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025a9: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025e0: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2501; mov rdi, rbx; call rax; 
0x0000000000002789: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027c1: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027f9: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x26fb; mov rdi, rbp; call rax; 
0x0000000000002830: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bf9: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c31: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c69: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002ca1: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cd9: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d11: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d49: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d81: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002db8: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2bbe; mov rdi, rbx; call rax; 
0x0000000000003599: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x2fa9; mov rdi, rbp; call rax; 
0x0000000000003561: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035d0: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003e41: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e09: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e79: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f29: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f61: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eb1: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044a8: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044e0: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x427e; mov rdi, rbx; call rax; 
0x0000000000004518: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d28: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dc0: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x4d81; mov rdi, rbx; call rax; 
0x00000000000052a0: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x50f9; mov rdi, rbx; call rax; 
0x0000000000005378: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d78: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005eb8: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x5e81; mov rdi, rbx; call rax; 
0x00000000000064f9: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x6086; mov rdi, r12; call rax; 
0x0000000000006278: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x6245; mov rdi, rbx; call rax; 
0x0000000000006981: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006e80: mov eax, dword ptr [rax + 0x30]; cmp rax, rdx; je 0x6e12; mov rdi, rbx; call rax; 
0x0000000000007287: mov eax, dword ptr [rax + rdx]; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000002edd: mov eax, dword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000000071a1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007241: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x00000000000071e1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; mov dword ptr [rdx + rax], esi; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071c1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; mov word ptr [rdx + rax], si; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000020f1: mov eax, dword ptr [rdi + 0x70]; ret; 
0x0000000000006a00: mov eax, dword ptr [rdi + 0x78]; ret; 
0x0000000000002101: mov eax, dword ptr [rdi + 0x88]; ret; 
0x00000000000020e1: mov eax, dword ptr [rdi + 0x90]; ret; 
0x0000000000002111: mov eax, dword ptr [rdi + 0x98]; ret; 
0x00000000000075b1: mov eax, dword ptr [rdi + 8]; ret; 
0x0000000000007285: mov eax, dword ptr [rdi]; mov eax, dword ptr [rax + rdx]; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007265: mov eax, dword ptr [rdi]; movzx eax, word ptr [rax + rdx]; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000075a1: mov eax, dword ptr [rdi]; ret; 
0x0000000000001f19: mov eax, dword ptr [rip + 0x2080d1]; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000001ec8: mov eax, dword ptr [rip + 0x20810a]; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x00000000000016b5: mov eax, dword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; 
0x00000000000016b5: mov eax, dword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; add rsp, 8; ret; 
0x00000000000040e7: mov eax, dword ptr [rsp]; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000006ff9: mov eax, ebx; jne 0x705f; add rsp, 0x10; pop rbx; ret; 
0x0000000000005cf4: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000002330: mov eax, esi; ret; 
0x0000000000002d51: mov ebp, 0x48fffffd; mov edi, ebp; call rax; 
0x0000000000005ad1: mov ebp, 0x8948ffff; ret; 
0x0000000000005acc: mov ebp, 0xace8ffff; mov ebp, 0x8948ffff; ret; 
0x0000000000002e61: mov ebx, 0x85ffffea; sal byte ptr [rbp - 0x21], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000005f33: mov ecx, 0xf00001d; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000664f: mov edi, eax; call rdx; 
0x0000000000001ca7: mov edi, ebp; call rax; 
0x0000000000002ed5: mov edi, ebx; call 0x18b0; mov rax, qword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000004763: mov edi, ebx; call 0x19f0; mov eax, 1; pop rbx; ret; 
0x0000000000002ee5: mov edi, ebx; call qword ptr [rax + 0x30]; 
0x0000000000001d36: mov edi, ebx; call rax; 
0x000000000000715a: mov edi, esi; call 0x1700; mov qword ptr [rbx + 0x10], 0; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000040f0: mov edi, esp; call qword ptr [rax + 0x30]; 
0x0000000000003536: mov edi, esp; call rax; 
0x0000000000002541: mov edx, 0x48fffffe; mov edi, ebp; call rax; 
0x0000000000005b12: mov edx, 0x66ffffbc; nop dword ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x000000000000663f: mov edx, dword ptr [rax]; mov rdx, qword ptr [rdx + 0x30]; cmp rdx, rcx; je 0x6404; mov rdi, rax; call rdx; 
0x000000000000711d: mov edx, dword ptr [rbx + 8]; xor esi, esi; call 0x17a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000007281: mov edx, dword ptr [rdi + 0x10]; mov rax, qword ptr [rdi]; mov eax, dword ptr [rax + rdx]; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007261: mov edx, dword ptr [rdi + 0x10]; mov rax, qword ptr [rdi]; movzx eax, word ptr [rax + rdx]; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000071a5: mov edx, dword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007245: mov edx, dword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x00000000000071e5: mov edx, dword ptr [rdi]; mov dword ptr [rdx + rax], esi; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071c5: mov edx, dword ptr [rdi]; mov word ptr [rdx + rax], si; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x0000000000006642: mov edx, dword ptr [rdx + 0x30]; cmp rdx, rcx; je 0x6404; mov rdi, rax; call rdx; 
0x00000000000040ea: mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000002edf: mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000005b13: mov esp, 0x2e66ffff; nop dword ptr [rax + rax]; mov rsp, rdi; ret; 
0x0000000000008ac4: mov esp, 0x4800000a; out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000005b21: mov esp, edi; ret; 
0x0000000000006f73: mov qword ptr [rax + 8], 0xb; mov byte ptr [rax + 0x1b], 0; ret; 
0x0000000000007161: mov qword ptr [rbx + 0x10], 0; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000007127: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000074a8: mov qword ptr [rbx + 0x10], r8; mov byte ptr [rdx], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000074ea: mov qword ptr [rbx + 0x10], r8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000007169: mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000007195: mov qword ptr [rbx], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000070ef: mov qword ptr [rdi + 0x10], 0; ret; 
0x00000000000071cf: mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071ab: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x000000000000724b: mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x000000000000726f: mov qword ptr [rdi + 0x10], rdx; ret; 
0x000000000000214a: mov qword ptr [rdi + 0x70], rcx; ret; 
0x000000000000225d: mov qword ptr [rdi + 0x88], rax; ret; 
0x0000000000002270: mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x0000000000002277: mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000070e7: mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x0000000000006f47: mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x00000000000070e0: mov qword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x00000000000022e7: mov qword ptr [rdi], rax; ret; 
0x000000000000209d: mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000002092: mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x00000000000020a8: mov qword ptr [rdx], 0; ret; 
0x00000000000040e6: mov rax, qword ptr [r12]; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000001c99: mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001cc9: mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cf9: mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d28: mov rax, qword ptr [rax + 0x30]; cmp rax, r12; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000003690: mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x32d7; mov rdi, r13; call rax; 
0x0000000000003528: mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x3397; mov rdi, r12; call rax; 
0x0000000000003738: mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x33fa; mov rdi, r12; call rax; 
0x0000000000003700: mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x3450; mov rdi, r12; call rax; 
0x00000000000036c8: mov rax, qword ptr [rax + 0x30]; cmp rax, rcx; je 0x34a6; mov rdi, r12; call rax; 
0x0000000000002317: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x22cb; mov rdi, rbx; call rax; 
0x0000000000002397: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x236a; mov rdi, rbx; call rax; 
0x0000000000002538: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x23ff; mov rdi, rbp; call rax; 
0x0000000000002570: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2455; mov rdi, rbp; call rax; 
0x00000000000025a8: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x24ab; mov rdi, rbp; call rax; 
0x00000000000025df: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2501; mov rdi, rbx; call rax; 
0x0000000000002788: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x264f; mov rdi, rbp; call rax; 
0x00000000000027c0: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x26a5; mov rdi, rbp; call rax; 
0x00000000000027f8: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x26fb; mov rdi, rbp; call rax; 
0x000000000000282f: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2751; mov rdi, rbx; call rax; 
0x0000000000002bf8: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x28a0; mov rdi, rbp; call rax; 
0x0000000000002c30: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2924; mov rdi, rbp; call rax; 
0x0000000000002c68: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x29a8; mov rdi, rbp; call rax; 
0x0000000000002ca0: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a14; mov rdi, rbp; call rax; 
0x0000000000002cd8: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2a66; mov rdi, rbp; call rax; 
0x0000000000002d10: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2abc; mov rdi, rbp; call rax; 
0x0000000000002d48: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b12; mov rdi, rbp; call rax; 
0x0000000000002d80: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2b68; mov rdi, rbp; call rax; 
0x0000000000002db7: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2bbe; mov rdi, rbx; call rax; 
0x0000000000003598: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x2fa9; mov rdi, rbp; call rax; 
0x0000000000003560: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x300e; mov rdi, rbp; call rax; 
0x00000000000035cf: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x31d5; mov rdi, rbx; call rax; 
0x0000000000003e40: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x39e3; mov rdi, r13; call rax; 
0x0000000000003e08: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3a4a; mov rdi, r13; call rax; 
0x0000000000003e78: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3ab1; mov rdi, r13; call rax; 
0x0000000000003f28: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3b28; mov rdi, r13; call rax; 
0x0000000000003f60: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3bc9; mov rdi, r13; call rax; 
0x0000000000003eb0: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x3d86; mov rdi, r12; call rax; 
0x00000000000044a7: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4219; mov rdi, rbx; call rax; 
0x00000000000044df: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x427e; mov rdi, rbx; call rax; 
0x0000000000004517: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x43eb; mov rdi, rbx; call rax; 
0x0000000000004d27: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4cd4; mov rdi, rbx; call rax; 
0x0000000000004dbf: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x4d81; mov rdi, rbx; call rax; 
0x000000000000529f: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x50f9; mov rdi, rbx; call rax; 
0x0000000000005377: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5251; mov rdi, rbx; call rax; 
0x0000000000005d77: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5d41; mov rdi, rbx; call rax; 
0x0000000000005eb7: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x5e81; mov rdi, rbx; call rax; 
0x00000000000064f8: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6086; mov rdi, r12; call rax; 
0x0000000000006277: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6245; mov rdi, rbx; call rax; 
0x0000000000006980: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x64a0; mov rdi, r12; call rax; 
0x0000000000006e7f: mov rax, qword ptr [rax + 0x30]; cmp rax, rdx; je 0x6e12; mov rdi, rbx; call rax; 
0x0000000000002edc: mov rax, qword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000000071a0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007240: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x00000000000071e0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; mov dword ptr [rdx + rax], esi; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071c0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi]; mov word ptr [rdx + rax], si; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000020f0: mov rax, qword ptr [rdi + 0x70]; ret; 
0x0000000000002100: mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020e0: mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000002110: mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000075b0: mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000007284: mov rax, qword ptr [rdi]; mov eax, dword ptr [rax + rdx]; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007264: mov rax, qword ptr [rdi]; movzx eax, word ptr [rax + rdx]; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000075a0: mov rax, qword ptr [rdi]; ret; 
0x0000000000001f18: mov rax, qword ptr [rip + 0x2080d1]; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000001ec7: mov rax, qword ptr [rip + 0x20810a]; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x00000000000016b4: mov rax, qword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; 
0x00000000000016b4: mov rax, qword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000006ff8: mov rax, rbx; jne 0x705f; add rsp, 0x10; pop rbx; ret; 
0x00000000000040ef: mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000003535: mov rdi, r12; call rax; 
0x000000000000369d: mov rdi, r13; call rax; 
0x000000000000664e: mov rdi, rax; call rdx; 
0x0000000000001ca6: mov rdi, rbp; call rax; 
0x0000000000002ed4: mov rdi, rbx; call 0x18b0; mov rax, qword ptr [rbx]; mov esi, 0xa; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000004762: mov rdi, rbx; call 0x19f0; mov eax, 1; pop rbx; ret; 
0x0000000000002ee4: mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000001d35: mov rdi, rbx; call rax; 
0x0000000000007159: mov rdi, rsi; call 0x1700; mov qword ptr [rbx + 0x10], 0; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000000663e: mov rdx, qword ptr [rax]; mov rdx, qword ptr [rdx + 0x30]; cmp rdx, rcx; je 0x6404; mov rdi, rax; call rdx; 
0x000000000000711c: mov rdx, qword ptr [rbx + 8]; xor esi, esi; call 0x17a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000007280: mov rdx, qword ptr [rdi + 0x10]; mov rax, qword ptr [rdi]; mov eax, dword ptr [rax + rdx]; add rdx, 4; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000007260: mov rdx, qword ptr [rdi + 0x10]; mov rax, qword ptr [rdi]; movzx eax, word ptr [rax + rdx]; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000071a4: mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdx + rax], sil; ret; 
0x0000000000007244: mov rdx, qword ptr [rdi]; lea rcx, [rax + 1]; mov qword ptr [rdi + 0x10], rcx; movzx eax, byte ptr [rdx + rax]; ret; 
0x00000000000071e4: mov rdx, qword ptr [rdi]; mov dword ptr [rdx + rax], esi; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071c4: mov rdx, qword ptr [rdi]; mov word ptr [rdx + rax], si; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x0000000000006641: mov rdx, qword ptr [rdx + 0x30]; cmp rdx, rcx; je 0x6404; mov rdi, rax; call rdx; 
0x0000000000005b20: mov rsp, rdi; ret; 
0x00000000000071c7: mov word ptr [rdx + rax], si; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x0000000000005cec: movabs al, byte ptr [0x8908c48348000000]; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000002329: movabs eax, dword ptr [0xf08990fffff5b1e8]; ret; 
0x0000000000004d2f: movsb byte ptr [rdi], byte ptr [rsi]; mov rdi, rbx; call rax; 
0x0000000000008ce1: movsb byte ptr [rdi], byte ptr [rsi]; syscall; 
0x0000000000005f3b: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000046a0: movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x000000000000208e: movups xmmword ptr [rdx + 0x78], xmm0; mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000005f37: movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000724f: movzx eax, byte ptr [rdx + rax]; ret; 
0x0000000000007267: movzx eax, word ptr [rax + rdx]; add rdx, 2; mov qword ptr [rdi + 0x10], rdx; ret; 
0x0000000000002253: movzx edx, byte ptr [rdx + 0xf]; mov byte ptr [rdi + 0x87], dl; mov qword ptr [rdi + 0x88], rax; ret; 
0x00000000000069e8: nop dword ptr [rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020c8: nop dword ptr [rax + rax]; lea rax, [rdi + 0x78]; ret; 
0x00000000000020b8: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x00000000000022eb: nop dword ptr [rax + rax]; lea rax, [rip - 0x367]; mov qword ptr [rdi], rax; ret; 
0x00000000000069f8: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x78]; ret; 
0x0000000000002268: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000020e8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x70]; ret; 
0x00000000000020f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020d8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000002108: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000075a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000000759b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x0000000000005b18: nop dword ptr [rax + rax]; mov rsp, rdi; ret; 
0x0000000000001ed8: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000000070c8: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000070bd: nop dword ptr [rax]; mov eax, 1; ret; 
0x00000000000070dd: nop dword ptr [rax]; mov qword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; mov qword ptr [rdi + 0x10], 0; ret; 
0x00000000000069e2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020b2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x00000000000069e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0x78]; ret; 
0x00000000000020b7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000002267: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000020f7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020d7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000000075a7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000005b17: nop dword ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x0000000000001ed7: nop dword ptr cs:[rax + rax]; pop rbp; ret; 
0x00000000000070c7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x000000000000759a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x0000000000001f27: nop word ptr [rax + rax]; pop rbp; ret; 
0x00000000000069e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0x78]; ret; 
0x00000000000020b6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000002266: nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000020f6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020d6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000000075a6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000005b16: nop word ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x0000000000001ed6: nop word ptr cs:[rax + rax]; pop rbp; ret; 
0x00000000000070c6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000008880: nop; loope 0x8882; jmp qword ptr [rbp]; 
0x000000000000232f: nop; mov eax, esi; ret; 
0x0000000000007599: nop; nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x00000000000020c5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0x78]; ret; 
0x0000000000002265: nop; nop word ptr cs:[rax + rax]; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000020f5: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020d5: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000000075a5: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000008b50: nop; out 0xff, al; call qword ptr [rbx]; 
0x000000000000463c: nop; sar edi, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000001f23: or al, 0x5d; jmp rax; 
0x0000000000006f45: or al, 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x0000000000007ed0: or al, 0xb; add byte ptr [rax], al; shr ah, 0xff; jmp qword ptr [rax]; 
0x0000000000006f70: or al, byte ptr [r8 + rcx*2 - 0x39]; or byte ptr [rbx], cl; add byte ptr [rax], al; add dh, al; sbb eax, dword ptr [rax]; ret; 
0x0000000000006f71: or al, byte ptr [rax + rcx*2 - 0x39]; or byte ptr [rbx], cl; add byte ptr [rax], al; add dh, al; sbb eax, dword ptr [rax]; ret; 
0x0000000000008a21: or al, byte ptr [rax]; add ah, bh; in al, 0xff; jmp qword ptr [rax]; 
0x00000000000040eb: or al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000002ee0: or al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000008a6d: or al, byte ptr [rax]; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000008a6c: or al, byte ptr fs:[rax]; add byte ptr [rax], dl; out 0xff, al; call qword ptr [rbx]; 
0x0000000000006f3d: or byte ptr [r13 + 0x72], spl; jb 0x6fb2; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x00000000000016b3: or byte ptr [rax - 0x75], cl; add eax, 0x20892d; test rax, rax; je 0x16c2; call rax; 
0x00000000000088a9: or byte ptr [rax], al; add ah, dl; loope 0x88ae; jmp qword ptr [rbp]; 
0x00000000000088a1: or byte ptr [rax], al; add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rax - 0x2bfffff8], ah; loope 0x88ae; jmp qword ptr [rbp]; 
0x0000000000006f3e: or byte ptr [rbp + 0x72], ah; jb 0x6fb2; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x000000000000557c: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000002e6c: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000006f76: or byte ptr [rbx], cl; add byte ptr [rax], al; add dh, al; sbb eax, dword ptr [rax]; ret; 
0x0000000000004ceb: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000001e48: or cl, ch; ret 0xfff9; 
0x0000000000001ed2: or eax, 0x66e0ff5d; nop dword ptr cs:[rax + rax]; pop rbp; ret; 
0x0000000000008b9d: or eax, dword ptr [rax]; add al, ah; out 0xff, al; call qword ptr [rbx]; 
0x0000000000006f77: or eax, dword ptr [rax]; add byte ptr [rax], al; mov byte ptr [rax + 0x1b], 0; ret; 
0x0000000000002149: out 0x48, al; mov dword ptr [rdi + 0x70], ecx; ret; 
0x0000000000008b51: out 0xff, al; call qword ptr [rbx]; 
0x0000000000008ac9: out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000001ca8: out dx, eax; call rax; 
0x0000000000006f42: outsd dx, dword ptr [rsi]; mov byte ptr [rcx + 0xc], 0x72; mov qword ptr [rdi + 8], 0xd; mov byte ptr [rdi + 0x1d], 0; ret; 
0x000000000000322f: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000004b20: pop r12; pop r13; pop r14; ret; 
0x0000000000004cf0: pop r12; pop r13; ret; 
0x0000000000005bf3: pop r12; ret; 
0x0000000000003231: pop r13; pop r14; pop r15; ret; 
0x0000000000004b22: pop r13; pop r14; ret; 
0x0000000000004cf2: pop r13; ret; 
0x0000000000003233: pop r14; pop r15; ret; 
0x0000000000004b24: pop r14; ret; 
0x0000000000003235: pop r15; ret; 
0x0000000000001ed3: pop rbp; jmp rax; 
0x000000000000322e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000004b1f: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000004cef: pop rbp; pop r12; pop r13; ret; 
0x0000000000005bf2: pop rbp; pop r12; ret; 
0x0000000000003232: pop rbp; pop r14; pop r15; ret; 
0x0000000000004b23: pop rbp; pop r14; ret; 
0x0000000000001ee0: pop rbp; ret; 
0x0000000000004cee: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000005bf1: pop rbx; pop rbp; pop r12; ret; 
0x0000000000002e6d: pop rbx; pop rbp; ret; 
0x00000000000046a3: pop rbx; ret; 
0x0000000000003236: pop rdi; ret; 
0x0000000000005b24: pop rdx; ret; 
0x0000000000003234: pop rsi; pop r15; ret; 
0x0000000000004b25: pop rsi; ret; 
0x0000000000003230: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000004b21: pop rsp; pop r13; pop r14; ret; 
0x0000000000004cf1: pop rsp; pop r13; ret; 
0x0000000000005bf4: pop rsp; ret; 
0x00000000000037cd: psraw mm7, mm7; dec dword ptr [rax - 0x77]; ret; 
0x0000000000008498: push rax; add byte ptr [rax], al; add ah, al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000008480: push rax; ret 0xffff; 
0x00000000000054d5: push rdi; ret; 
0x0000000000006bc5: push rdi; xor al, 0x20; add al, ch; ret 0xffab; 
0x0000000000004baa: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000004ced: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000005cf5: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000000208b: rep stosq qword ptr [rdi], rax; movups xmmword ptr [rdx + 0x78], xmm0; mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000005dfe: ret 0x1bf; 
0x000000000000445a: ret 0x205b; 
0x00000000000019f2: ret 0x2085; 
0x00000000000017f2: ret 0x2086; 
0x00000000000074e6: ret 0x2c6; 
0x000000000000726d: ret 0x4802; 
0x000000000000728c: ret 0x4804; 
0x00000000000054a9: ret 0x4810; 
0x000000000000749a: ret 0x4901; 
0x0000000000008db4: ret 0x502; 
0x0000000000008d35: ret 0x8205; 
0x0000000000007235: ret 0x8844; 
0x00000000000028f1: ret 0x8948; 
0x00000000000072f5: ret 0xd108; 
0x0000000000004eba: ret 0xd120; 
0x0000000000004878: ret 0xd184; 
0x0000000000006bca: ret 0xffab; 
0x000000000000361a: ret 0xffe1; 
0x0000000000001e4a: ret 0xfff9; 
0x000000000000541e: ret 0xfffe; 
0x000000000000579c: ret 0xffff; 
0x00000000000072fa: ret 1; 
0x0000000000003a36: ret 6; 
0x0000000000000340: ret; 
0x00000000000054b1: retf 0x8948; ret; 
0x00000000000040e2: retf 0xffd7; dec dword ptr [rcx - 0x75]; add al, 0x24; mov esi, 0xa; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000007231: rol byte ptr [rcx], 0x48; cmp edx, eax; mov byte ptr [rcx], r8b; jne 0x7220; add qword ptr [rdi + 0x10], rdx; ret; 
0x00000000000071cd: rol byte ptr [rdx], 0x48; mov dword ptr [rdi + 0x10], eax; ret; 
0x0000000000005578: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000002d4e: ror byte ptr [rdi], 1; test byte ptr [rbp + 0x48fffffd], bh; mov edi, ebp; call rax; 
0x0000000000002bfe: ror byte ptr [rdi], 1; test byte ptr [rbx + 0x48fffffc], bl; mov edi, ebp; call rax; 
0x0000000000003566: ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffa], ah; mov edi, ebp; call rax; 
0x0000000000002cde: ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffd], al; mov edi, ebp; call rax; 
0x00000000000064fe: ror byte ptr [rdi], 1; test byte ptr [rcx + 0x4cfffffb], al; mov edi, esp; call rax; 
0x0000000000002d16: ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48fffffd], bl; mov edi, ebp; call rax; 
0x00000000000044e5: ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffd], dl; mov edi, ebx; call rax; 
0x000000000000253e: ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffe], bh; mov edi, ebp; call rax; 
0x00000000000025e5: ror byte ptr [rdi], 1; test byte ptr [rip + 0x48ffffff], dl; mov edi, ebx; call rax; 
0x0000000000003e0e: ror byte ptr [rdi], 1; test byte ptr [rip + 0x4cfffffc], dh; mov edi, ebp; call rax; 
0x0000000000003e46: ror byte ptr [rdi], 1; test byte ptr [rsi + 0x4cfffffb], dl; mov edi, ebp; call rax; 
0x0000000000003f66: ror byte ptr [rdi], 1; test byte ptr [rsp + rdi*8 - 1], bl; dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x0000000000005d7f: ror dword ptr [rax - 0x77], 0xdf; call rax; 
0x00000000000072f2: ror dword ptr [rdi], cl; xchg eax, ebx; ret 0xd108; 
0x000000000000627d: sal byte ptr [rbp + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000002e66: sal byte ptr [rbp - 0x21], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000000231d: sal byte ptr [rbx + rbp*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000005d7d: sal byte ptr [rcx + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004dc5: sal byte ptr [rcx + rdi*4 + 0x48], 1; mov edi, ebx; call rax; 
0x00000000000016bd: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000006e85: sal byte ptr [rdx + rcx*4 + 0x48], 1; mov edi, ebx; call rax; 
0x000000000000239d: sal byte ptr [rdx + rcx*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004d2d: sal byte ptr [rsp + 0x48], 1; mov edi, ebx; call rax; 
0x00000000000045ec: sar edi, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000005ac7: sbb al, 0; add al, ch; add dword ptr [rbp - 0x53170001], edi; mov ebp, 0x8948ffff; ret; 
0x0000000000005b0e: sbb al, 0; add al, ch; mov edx, 0x66ffffbc; nop dword ptr cs:[rax + rax]; mov rsp, rdi; ret; 
0x0000000000008478: sbb al, 0; add byte ptr [rax], al; je 0x8482; add byte ptr [rax], al; push rax; ret 0xffff; 
0x000000000000469a: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000001e41: sbb byte ptr [rax - 0x3b7cb800], al; or cl, ch; ret 0xfff9; 
0x0000000000001f17: sbb byte ptr [rax - 0x75], cl; add eax, 0x2080d1; test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000008448: sbb byte ptr [rax], al; add byte ptr [rax], al; add al, 0; add byte ptr [rax], dh; ret 0xffff; 
0x000000000000469b: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000008ac0: sbb byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x4800000a; out 0xff, al; jmp qword ptr [rcx]; 
0x0000000000008a20: sbb byte ptr [rdx], cl; add byte ptr [rax], al; cld; in al, 0xff; jmp qword ptr [rax]; 
0x0000000000001ec6: sbb dword ptr [rax - 0x75], ecx; add eax, 0x20810a; test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x0000000000006f7d: sbb eax, dword ptr [rax]; ret; 
0x00000000000037fe: scasb al, byte ptr [rdi]; loope 0x3800; jmp qword ptr [rsi + 0xf]; 
0x0000000000007ed4: shr ah, 0xff; jmp qword ptr [rax]; 
0x0000000000003921: stosd dword ptr [rdi], eax; fdivp st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000000231f: stosd dword ptr [rdi], eax; mov rdi, rbx; call rax; 
0x000000000000208d: stosd dword ptr [rdi], eax; movups xmmword ptr [rdx + 0x78], xmm0; mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x000000000000208c: stosq qword ptr [rdi], rax; movups xmmword ptr [rdx + 0x78], xmm0; mov qword ptr [rdx + 0x98], 0; mov qword ptr [rdx + 0x90], 0; mov qword ptr [rdx], 0; ret; 
0x0000000000008a34: sub al, 0xa; add byte ptr [rax], al; in eax, 0xff; jmp rsp; 
0x00000000000016b7: sub eax, 0x48002089; test eax, eax; je 0x16c2; call rax; 
0x00000000000016b7: sub eax, 0x48002089; test eax, eax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000007635: sub esp, 8; add rsp, 8; ret; 
0x00000000000016b1: sub esp, 8; mov rax, qword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; 
0x0000000000007634: sub rsp, 8; add rsp, 8; ret; 
0x00000000000016b0: sub rsp, 8; mov rax, qword ptr [rip + 0x20892d]; test rax, rax; je 0x16c2; call rax; 
0x0000000000008ce2: syscall; 
0x0000000000007061: test al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000005ceb: test byte ptr [rax + 0x48000000], ah; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000069ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0x1408]; ret; 
0x00000000000020ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0x78]; ret; 
0x00000000000020ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x00000000000069fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x78]; ret; 
0x000000000000226a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x90], rsi; mov qword ptr [rdi + 0x98], rdx; ret; 
0x00000000000020ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x70]; ret; 
0x00000000000020fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x88]; ret; 
0x00000000000020da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000000210a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000000075aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000005b1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsp, rdi; ret; 
0x0000000000001eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000070ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000002d50: test byte ptr [rbp + 0x48fffffd], bh; mov edi, ebp; call rax; 
0x0000000000001cd1: test byte ptr [rbp + 0x48fffffe], ch; mov edi, ebp; call rax; 
0x0000000000003740: test byte ptr [rbp + 0x4cfffffc], dh; mov edi, esp; call rax; 
0x0000000000005e30: test byte ptr [rbx + 0x48000000], bl; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000002c00: test byte ptr [rbx + 0x48fffffc], bl; mov edi, ebp; call rax; 
0x0000000000003568: test byte ptr [rcx + 0x48fffffa], ah; mov edi, ebp; call rax; 
0x0000000000002ce0: test byte ptr [rcx + 0x48fffffd], al; mov edi, ebp; call rax; 
0x0000000000006500: test byte ptr [rcx + 0x4cfffffb], al; mov edi, esp; call rax; 
0x0000000000002d18: test byte ptr [rdi + 0x48fffffd], bl; mov edi, ebp; call rax; 
0x0000000000001ca1: test byte ptr [rdi + 0x48fffffe], al; mov edi, ebp; call rax; 
0x00000000000044e7: test byte ptr [rdx + 0x48fffffd], dl; mov edi, ebx; call rax; 
0x0000000000002540: test byte ptr [rdx + 0x48fffffe], bh; mov edi, ebp; call rax; 
0x00000000000025e7: test byte ptr [rip + 0x48ffffff], dl; mov edi, ebx; call rax; 
0x0000000000003e10: test byte ptr [rip + 0x4cfffffc], dh; mov edi, ebp; call rax; 
0x0000000000006649: test byte ptr [rsi + 0x48fffffd], dh; mov edi, eax; call rdx; 
0x0000000000003e48: test byte ptr [rsi + 0x4cfffffb], dl; mov edi, ebp; call rax; 
0x0000000000003f68: test byte ptr [rsp + rdi*8 - 1], bl; dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x00000000000016bc: test eax, eax; je 0x16c2; call rax; 
0x00000000000016bc: test eax, eax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000001ecf: test eax, eax; je 0x1ee0; pop rbp; jmp rax; 
0x0000000000001f20: test eax, eax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000002e65: test eax, eax; jne 0x2e48; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000016bb: test rax, rax; je 0x16c2; call rax; 
0x00000000000016bb: test rax, rax; je 0x16c2; call rax; add rsp, 8; ret; 
0x0000000000001ece: test rax, rax; je 0x1ee0; pop rbp; jmp rax; 
0x0000000000001f1f: test rax, rax; je 0x1f30; pop rbp; jmp rax; 
0x0000000000002259: xchg dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi + 0x88], rax; ret; 
0x00000000000072f4: xchg eax, ebx; ret 0xd108; 
0x0000000000005499: xchg eax, ebx; ret; 
0x0000000000002258: xchg eax, edi; xchg dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi + 0x88], rax; ret; 
0x0000000000008b9c: xchg eax, esp; or eax, dword ptr [rax]; add al, ah; out 0xff, al; call qword ptr [rbx]; 
0x0000000000004eb9: xchg eax, esp; ret 0xd120; 
0x0000000000004877: xchg eax, esp; ret 0xd184; 
0x000000000000492a: xchg eax, esp; ret; 
0x0000000000005577: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000006bc6: xor al, 0x20; add al, ch; ret 0xffab; 
0x0000000000006ba0: xor al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000071c9: xor al, 2; add rax, 2; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071e8: xor al, 2; add rax, 4; mov qword ptr [rdi + 0x10], rax; ret; 
0x00000000000071b1: xor al, 2; ret; 
0x0000000000002d4b: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rbp + 0x48fffffd], bh; mov edi, ebp; call rax; 
0x0000000000002bfb: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rbx + 0x48fffffc], bl; mov edi, ebp; call rax; 
0x0000000000003563: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffa], ah; mov edi, ebp; call rax; 
0x0000000000002cdb: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x48fffffd], al; mov edi, ebp; call rax; 
0x00000000000064fb: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx + 0x4cfffffb], al; mov edi, esp; call rax; 
0x0000000000002d13: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48fffffd], bl; mov edi, ebp; call rax; 
0x00000000000044e2: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffd], dl; mov edi, ebx; call rax; 
0x000000000000253b: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdx + 0x48fffffe], bh; mov edi, ebp; call rax; 
0x00000000000025e2: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rip + 0x48ffffff], dl; mov edi, ebx; call rax; 
0x0000000000003e0b: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rip + 0x4cfffffc], dh; mov edi, ebp; call rax; 
0x0000000000003e43: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rsi + 0x4cfffffb], dl; mov edi, ebp; call rax; 
0x0000000000003f63: xor byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rsp + rdi*8 - 1], bl; dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x000000000000627a: xor byte ptr [rax + 0x39], cl; sal byte ptr [rbp + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x000000000000231a: xor byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rbp*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000005d7a: xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rax*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004dc2: xor byte ptr [rax + 0x39], cl; sal byte ptr [rcx + rdi*4 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000006e82: xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*4 + 0x48], 1; mov edi, ebx; call rax; 
0x000000000000239a: xor byte ptr [rax + 0x39], cl; sal byte ptr [rdx + rcx*8 + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000004d2a: xor byte ptr [rax + 0x39], cl; sal byte ptr [rsp + 0x48], 1; mov edi, ebx; call rax; 
0x0000000000005bf0: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000001c9c: xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b2d; mov rdi, rbp; call rax; 
0x0000000000001ccc: xor byte ptr [rcx + rdi - 0x20], cl; je 0x1b83; mov rdi, rbp; call rax; 
0x0000000000001cfc: xor byte ptr [rcx + rdi - 0x20], cl; je 0x1bd9; mov rdi, rbp; call rax; 
0x0000000000001d2b: xor byte ptr [rcx + rdi - 0x20], cl; je 0x1c2f; mov rdi, rbx; call rax; 
0x0000000000004638: xor dword ptr [rax], eax; add al, ch; nop; sar edi, 1; dec dword ptr [rax - 0x77]; ret; 
0x00000000000028eb: xor dword ptr [rdi + 0x20], esi; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000003e11: xor eax, 0x4cfffffc; mov edi, ebp; call rax; 
0x0000000000004637: xor eax, 0xe8000031; nop; sar edi, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000004ba9: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000004cec: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000004bb3: xor eax, eax; ret; 
0x0000000000005d59: xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000007120: xor esi, esi; call 0x17a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 

1169 gadgets found
